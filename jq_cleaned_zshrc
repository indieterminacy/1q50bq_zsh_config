autoload -Uz compinit
compinit

# Check if zplug is installed
if [[ ! -d ~/.zplug ]]; then
    git clone https://github.com/zplug/zplug ~/.zplug
    source ~/.zplug/init.zsh && zplug update --self
fi

# Essential
source ~/.zplug/init.zsh

# What does this do?
# zplug "junegunn/fzf", \
    # from:github, \
    # at:0.11.0, \
    # as:command, \
    # use:"*darwin*amd64*", \
    # rename-to:fzf
# It grabs the binary of fzf-bin version 0.11.0 from GitHub Release and uses
# the file that matches "*darwin*amd64" as a command called fzf!

####################
# rq Install
####################
# Install plugins if there are plugins that have not been installed
if ! zplug check --verbose; then
    printf "Install? [y/N]: "
    if read -q; then
        echo; zplug install
    fi
fi
##############
# Then, source packages and add commands to $PATH
zplug load --verbose

####################
# rq control
####################
source $HOME/4q50nqn_pathways/oq_zsh/5q50iqi_jq_interacting_configurations/oqo_control.zsh


####################
# rq analysing
####################
source $HOME/4q50nqn_pathways/oq_zsh/5q50rq_oqo_jq_analysing_plugins_configurations/oqo_analysis.zsh

####################
# rq Tasks
####################
####################
# oq Taskwarrior
####################
source $HOME/4q50nqn_pathways/oq_zsh/1q10rqr_oq_oqo_tasks_taskwarrior_plugins/rq_control_taskwarrior.zsh

###################
# tq Notes
###################
source $HOME/4q50nqn_pathways/oq_zsh/1q20tqt_oqo_notes_scripts/oq_notes.zsh

####################
# dq edit
####################
source $HOME/4q50nqn_pathways/oq_zsh/5q50dq_oqo_jq_editing_plugins_configurations/oqo_editing.zsh

####################
# iq_creating
####################
source $HOME/4q50nqn_pathways/oq_zsh/1q50cqc_oq_oqo_version-control_git_scripts/1q50iq_tq_create_repo.zsh

####################
# rq_adding
####################
####################
## fq_licences
####################
source $HOME/4q50nqn_pathways/oq_zsh/1q50cqc_oqo_version-control_scripts/1q10tq_adding_licenses.zsh

####################
# rq inserting
####################
source $HOME/4q50nqn_pathways/oq_zsh/5q50dqd_iqi_inserting_bindings/oqo_inserting.zsh

####################
# rq completing
####################
# source $HOME/4q50nqn_pathways/oq_zsh/5q50iqi_dqd_oqo_completing_inserting_plugins/oqo_completing.zsh

########################################
# 20_Content
########################################
########################################
# iq Extracting
########################################
source $HOME/4q50nqn_pathways/oq_zsh/5q50xq_oqo_extracting_plugins/oqo_extract.zsh

########################################
# 30_Display
########################################
########################################
# yq Emphasizing
########################################
source $HOME/4q50nqn_pathways/oq_zsh/5q50yq_oqo_emphasizing_plugins/yq_emphasis.zsh

####################
# tq reminders
####################
source $HOME/4q50nqn_pathways/oq_zsh/5q10tqt_oqo_reminders_plugins/tq_reminders.zsh

####################
# yq output
####################
source $HOME/4q50nqn_pathways/oq_zsh/5q30yq_oqo_outputting_plugins/oqo_output.zsh

####################
# vq colors
####################
# source $HOME/4q50nqn_pathways/oq_zsh/5q30gq_oqo_color_plugins/oqo_colors.zsh

####################
# vq themes
####################
source $HOME/4q50nqn_pathways/oq_zsh/5q50gqg_oqo_themes_plugins/oqo_themes.zsh

########################################
# 40_Movement
########################################
####################
# uq orientation
####################
source $HOME/4q50nqn_pathways/oq_zsh/5q50uq_oqo_orientating_plugins/uq_orientation.zsh

####################
# hq navigation
####################
source $HOME/4q50nqn_pathways/oq_zsh/5q50hq_oqo_navigating_plugins/oqo_navigation.zsh

# oqo Qiuy Script
# kq filetype
# TODO Check
source $HOME/4q50nqn_pathways/oq_zsh/1q40hq_oqo_navigating_scripts/hq_navigating_filter_filetype.zsh

###
# hq Navigation Application
###
source $HOME/4q50nqn_pathways/oq_zsh/1q40hq_oqo_navigating_scripts/hq_oq_navigating_applications.zsh

####################
# uq searching
####################
# Identify other file in folder
# source $HOME/5q_env-qiuy/50_Environment/uq_searching/oq_zsh/oqo_plugins/oqo_search.zsh
# source $HOME/5q_env-qiuy/50_Environment/uq_searching/oq_zsh/oqo_plugins/sq40u-search-zsh
source $HOME/1q_ctrl-qiuy/50_Environment/uq_searching/oq_zsh/oqo_scripts/oqo_search_configs_vim_qiuy.zsh

####################
# bq transferring
####################
####################
## oq_git
####################
source $HOME/1q_ctrl-qiuy/40_Movement/bq_transferring/oq_git/oqo_scripts/4q40bq_oq_transferring_git.zsh

########################################
# 50_Environment
########################################
source $HOME/5q_env-qiuy/50_Environment/iqi_states/oq_zsh/oqo_plugins/oqo_environment.zsh

########################################
# 60_System
########################################
source $HOME/5q_env-qiuy/60_System/iqi_states/oq_zsh/oqo_plugins/oqo_system.zsh

########################################
# General Utilities
########################################
# Support oh-my-zsh plugins and the like
zplug "plugins/git",   from:oh-my-zsh, if:"which git"

# Run a command after a plugin is installed/updated
zplug "tj/n", \
    hook-build:"make install"

# Install if "if:" tag returns true
# zplug "hchbaw/opp.zsh", if:"(( ${ZSH_VERSION%%.*} < 5 ))"


# Seems to be an issue with [[
# pieces
# Can manage gist file just like other plugins
# zplug "b4b4r07/79ee61f7c140c63d2786", \
    # from:gist, \
    # as:command, \
    # use:get_last_pane_path.sh

# Seems to be a problem loading this script

########################################
# oq Git
########################################
source $HOME/60o_Doc_Qiuy/50_Environment/nq_version_control/oq_git/oq_shell/oq_zsh/oqo_plugins/iqi_production/oqo_git.zsh

#  peco/percol/fzf wrapper plugin for zsh
zplug "mollifier/anyframe"

#####################################
# gq_jq_color_settings
#####################################
# For providing settings to permit Tmux programs to use colour appropriately
source $HOME/4q50nqn_pathways/oq_zsh/5q30gq_jq_color_configurations/oq_jq_tmux_configuration.zsh


# zplug 'zplug/zplug', hook-build:'zplug --self-manage'

#####################################
# hq Navigation
#####################################
# Zsh can be configured to remember the DIRSTACKSIZE last visited folders.
# This can then be used to cd them very quickly.
# You need to add some lines to your configuration file:
# Note: This will not work if you have more than one zsh session open, and
# attempt to cd, due to a conflict in both sessions writing to the same file.
# DIRSTACKFILE="$HOME/.cache/zsh/dirs"
# if [[ -f $DIRSTACKFILE ]] && [[ $#dirstack -eq 0 ]]; then
#   dirstack=( ${(f)"$(< $DIRSTACKFILE)"} )
#   [[ -d $dirstack[1] ]] && cd $dirstack[1]
# fi
# chpwd() {
#   print -l $PWD ${(u)dirstack} >$DIRSTACKFILE
# }

DIRSTACKSIZE=20

setopt AUTO_PUSHD PUSHD_SILENT PUSHD_TO_HOME

## Remove duplicate entries
setopt PUSHD_IGNORE_DUPS

## This reverts the +/- operators.
setopt PUSHD_MINUS

# Directory listings for zsh with git features
zplug "supercrabtree/k"

#####################
# gq_colorschemes
#################
#  A modified version of oh-my-zsh's plugin colorized-man
zplug "zlsun/solarized-man"
# https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/colored-man-pages

#  Auto-close and delete matching delimiters in zsh
zplug "hlissner/zsh-autopair"

#####################
# oq Tmux
#####################
#  Simple plugin for using tmux with zsh and SSH
# https://github.com/TBSliver/zsh-plugin-tmux-simple

#  Terminal/tmux titles based on current location and task
# https://github.com/jreese/zsh-titles

#######################################
# iqi_bindings
#######################################
########################################
# 10_Activity
########################################

####################
# zq10r_analysis
####################
# Global aliases can be used anywhere in the command line
alias -g C='| wc -l'
########################################
# 20_Content
########################################
####################
# tq history
####################
HISTFILE=$HOME/.histfile
########################################
#https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/ember-cli
########################################
# vq Themes
########################################
# For evaluating themes
autoload -U promptinit
promptinit
########################################
# yq Emphasis
########################################
# alias -g D="DISPLAY=:0.0"
# alias -g ED="export DISPLAY=:0.0"
alias -g EH='|& head'
alias -g H='| head'
alias -g HL='|& head -20'
alias -g ETL='|& tail -20'
alias -g S='| sort'
alias -g NS='| sort -n'
alias -g RNS='| sort -nr'
alias -g US='| sort -u'
alias -g ET='|& tail'
alias -g T='| tail'
alias -g TL='| tail -20'
alias -g M='| more'
alias -g EL='|& less'
alias -g ELS='|& less -S'
# alias -g LL="2>&1 | less"
alias -g L="| less"
alias -g LS='| less -S'
########################################
# 40_Movement
########################################
####################
# uq orientation
####################
# cd will never select the parent directory (e.g.: cd ../<TAB>):
zstyle ':completion:*:cd:*' ignore-parents parent pwd

# History search
[[ -n "${key[PageUp]}"   ]]  && bindkey  "${key[PageUp]}"    history-beginning-search-backward
[[ -n "${key[PageDown]}" ]]  && bindkey  "${key[PageDown]}"  history-beginning-search-forward
# vi style incremental search
bindkey '^R' history-incremental-search-backward
bindkey '^S' history-incremental-search-forward
bindkey '^P' history-search-backward
bindkey '^N' history-search-forward
####################
# rq completion
####################
# Ignore completion functions for commands you donâ€™t have:
zstyle ':completion:*:functions' ignored-patterns '_*'
####################
# uq searching
####################
alias -g EG='|& egrep'
alias -g G='| egrep'
# Fuzzy matching of completions for when you mistype them:
zstyle ':completion:*' completer _complete _match _approximate
zstyle ':completion:*:match:*' original only
zstyle ':completion:*:approximate:*' max-errors 1 numeric

####################
# hq navigation
####################
source /home/masterp47/5q_env-qiuy/50_Environment/hq_navigating/oq_zsh/iqi_bindings/hq_navigating.zsh

####################
# bq source
####################
# Source zplug plugins and add commands to $PATH
zplug load --verbose
# Unlike bash, zsh does not enable a built in help command. To use help in zsh,
# add following to your zshrc:
autoload -U run-help
autoload run-help-git
autoload run-help-svn
autoload run-help-svk
# unalias run-help
alias help=run-help
########################################
# 50_Environment
########################################
####################
# iq jobs
####################
#A ZSH plugin that allows you to foreground the last backgrounded job (when you
#would normally do fg) using Ctrl+Z. So in your terminal, you hit Ctrl+Z to
#background a job, then Ctrl+Z again to foreground it.
#https://github.com/theunraveler/zsh-fancy_ctrl_z
####################
# iq context
####################
# If you end up using a directory as argument, this will remove the trailing
# slash (usefull in ln)

zstyle ':completion:*' squeeze-slashes true

####################
# tq history
####################
# Preventing duplicate lines in the history
# Ignore dups removed to prepare for zsh-history-analysis
# setopt HIST_IGNORE_DUPS
#https://github.com/bamos/zsh-history-analysis
HISTSIZE=1000000000
SAVEHIST=$HISTSIZE
# setopt EXTENDED_HISTORY
####################
# zq50j_preferred_program
####################
# Suffix aliases are supported in zsh since version 4.2.0
alias -s tex=vim
alias -s html=w3m
alias -s org=w3m
alias -s pdf=zathura
alias -s zshrc=vim
####################
# zq10r_editor
####################
####################
# oq Vim
####################
export EDITOR="vim"
########################################
# 60_System
########################################
source $HOME/60o_Control_Qiuy/60_System/oq_shell/oq_zsh/iq_mappings/iqi_production/iq_system.zsh

###############
# iq history
###############
source $HOME/60o_Flow_Qiuy/50_Environment/uq_searching/iq_history/oq_shell/oq_zsh/iq_bindings/iqi_production/uq_history.zsh

###############
function hq {
# function 10d-create-or-40h-navigate-folder {
    local msg
    msg="$*"
    mkdir -p $msg
    cd $msg
    ranger
}

function hv {
    local msg
    msg="$*"
    vifm -c $msg
}

function vh {
    VQ=full vim .
}

function vq {
    local msg
    msg="$*"
    VQ=full vim $msg
# local msg
    # msg='<C-\><C-n>:e %d/%f<CR>'
    # VQ=full vim --remote-send $msg
}
function mq {
    local msg
    msg="$*"
    mc $msg
}

function uq {
    local peg
    # local msg
    # msg="$*"
    peg=$(ag --depth -1 -l)
    print $peg
    # | &>$HOME/50_Environment/50n_Pathways/60o_Python/q60oag-$msg
}

##########
## oq_fzf
##########
function fzf_tmux_helper() {
  [ -n "$TMUX_PANE" ] || return
  local cmd=$1
  shift
  tmux split-window -p 40 \
    "zsh -c \"\$(tmux send-keys -t $TMUX_PANE \"\$(source $HOME/.fzf.zsh; $cmd)\" $*)\""
}

# This is the function we are going to run in the split pane.
# - "find" to list the directories
# - "sed" will escape spaces in the paths.
# - "paste" will join the selected paths into a single line
function fzf_tmux_dir() {
  fzf_tmux_helper \
    'find * -path "*/\.*" -prune -o -type d -print 2> /dev/null |
     fzf --multi |
     sed "s/ /\\\\ /g" |
     paste -sd" " -' Space
}
# If you prefer to run fzf in full screen mode,
# add --no-height to your $FZF_DEFAULT_OPTS like follows:
# export FZF_DEFAULT_OPTS='--no-height --no-reverse'

# Or if you prefer to start in a tmux split pane, set $FZF_TMUX to 1.
export FZF_TMUX=1

export FZF_CTRL_T_OPTS="--preview '(highlight -O ansi -l {} 2> /dev/null || cat {} || tree -C {}) 2> /dev/null | head -200'"

export FZF_CTRL_R_OPTS="--preview 'echo {}' --preview-window down:3:hidden --bind '?:toggle-preview'"

###########
## oq_vim
############
source /home/masterp47/1q_ctrl-qiuy/20_Content/iqi_concatenating/oq_zsh/iqi_bindings/iqi_iqi_oq_compiling_bindings_vim.zsh


############
## oq_git
############

# Will return non-zero status if the current directory is not managed by git
function is_in_git_repo() {
  git rev-parse HEAD > /dev/null 2>&1
}

function gt() {
  # "Nothing to see here, move along"
  is_in_git_repo || return

  # Pass the list of the tags to fzf-tmux
  # - "{}" in preview option is the placeholder for the highlighted entry
  # - Preview window can display ANSI colors, so we enable --color=always
  # - We can terminate `git show` once we have $LINES lines
  git tag --sort -version:refname |
    fzf-tmux --multi --preview-window right:70% \
             --preview 'git show --color=always {} | head -'$LINES
}
############

# Then we bind it to a key.

# To clean
# bindkey -M '"\er": redraw-current-line'
# bindkey -M '"\C-g\C-t": "$(gt)\e\C-e\er"'

# oq Vim
# function vqr() {
#     local pathway
#     local mappings
#     local settings
#     local plugins
#     pathway="$HOME/60o_Control_Qiuy/10_Activity/xq_concatenating/oq_shell/oq_zsh/"
#     # local activation
#     # activation="./"
#     mappings="sq10r-compiling-mappings-vim.sh"
#     plugins="sq10r-compiling-plugins-vim.sh"
#     settings="sq10r-compiling-settings-vim.sh"
#     # $pathway$activation$mappings
#     # $pathway$activation$settings
#     # $pathway$activation$plugins
#     $pathway$mappings
#     $pathway$settings
#     $pathway$plugins
# }


# Scripts for searching Vim Qiuy configs
source $HOME/1q_ctrl-qiuy/50_Environment/uq_searching/oq_zsh/oqo_scripts/oqo_search_configs_vim_qiuy.zsh

# rq Analyse Softlinks
source $HOME/1q_ctrl-qiuy/50_Environment/rq_analysing/oq_zsh/oqo_scripts/rq_analyse_softlinks.zsh

# Set priority to load command like a nice command
# zsh syntax highlighting with dircolors in realtime e.g.,
# zsh-syntax-highlighting must be loaded
#https://github.com/trapd00r/zsh-syntax-highlighting-filetypes

# after executing compinit command and sourcing other plugins
zplug "zsh-users/zsh-syntax-highlighting"
# zplug "zsh-users/zsh-syntax-highlighting", \
    # nice:10

#####################
# gq_theming
#####################
ZSH_THEME="minimal-custom"

[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
